name: Release

on: [push]

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Delete Release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        delete_release: true # default: false
        tag_name: rolling # tag name to delete
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: rolling
        release_name: Rolling Release
        draft: false
        prerelease: true

  build_release:
    needs: create_release
    timeout-minutes: 5
    strategy:
      matrix:
        nim: [ 'stable' ]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Download ddls
        if: startsWith(matrix.os, 'windows')
        run: iwr https://nim-lang.org/download/dlls.zip -OutFile dlls.zip && Expand-Archive dlls.zip && cp dlls/*.dll .
      - name: Cache nimble
        if: runner.os != 'Windows'
        id: cache-nimble
        uses: actions/cache@v2
        with:
          path: ~/.nimble
          key: ${{ runner.os }}-nimble-${{ matrix.nim }}
      - uses: jiro4989/setup-nim-action@v1
        with:
          nim-version: ${{ matrix.nim }}
      - run: nimble test -y
      - name: Copy to Dest
        run: nimble -d:release build && mkdir strava_nim && cp strava_nim.exe,libeay64.dll,ssleay64.dll,pcre64.dll strava_nim
        #  && Compress-Archive -Path strava_nim -DestinationPath strava_nim_win_x64.zip
      - name: Copy DDLs
        if: ! startsWith(matrix.os, 'windows')
        run: nimble -d:release build && mkdir strava_nim && cp strava_nim strava_nim
      - uses: papeloto/action-zip@v1
        with:
          files: strava-nim/
          dest: strava_nim_${{ matrix.os }}.zip
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: strava_nim_${{ matrix.os }}.zip
          asset_name: strava_nim_${{ matrix.os }}.zip
          asset_content_type: application/zip
